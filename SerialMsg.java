/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SerialMsg'
 * message type.
 */

public class SerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new SerialMsg of size 10. */
    public SerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SerialMsg of the given data_length. */
    public SerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg with the given data_length
     * and base offset.
     */
    public SerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store.
     */
    public SerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public SerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SerialMsg> \n";
      try {
        s += "  [msg_type=0x"+Long.toHexString(get_msg_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [bin_id=0x"+Long.toHexString(get_bin_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordX=0x"+Long.toHexString(get_coordX())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [coordY=0x"+Long.toHexString(get_coordY())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [trashInEccess=0x"+Long.toHexString(get_trashInEccess())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msg_type
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msg_type' is signed (false).
     */
    public static boolean isSigned_msg_type() {
        return false;
    }

    /**
     * Return whether the field 'msg_type' is an array (false).
     */
    public static boolean isArray_msg_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msg_type'
     */
    public static int offset_msg_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msg_type'
     */
    public static int offsetBits_msg_type() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'msg_type'
     */
    public int get_msg_type() {
        return (int)getUIntBEElement(offsetBits_msg_type(), 16);
    }

    /**
     * Set the value of the field 'msg_type'
     */
    public void set_msg_type(int value) {
        setUIntBEElement(offsetBits_msg_type(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'msg_type'
     */
    public static int size_msg_type() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msg_type'
     */
    public static int sizeBits_msg_type() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: bin_id
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'bin_id' is signed (false).
     */
    public static boolean isSigned_bin_id() {
        return false;
    }

    /**
     * Return whether the field 'bin_id' is an array (false).
     */
    public static boolean isArray_bin_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'bin_id'
     */
    public static int offset_bin_id() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'bin_id'
     */
    public static int offsetBits_bin_id() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'bin_id'
     */
    public int get_bin_id() {
        return (int)getUIntBEElement(offsetBits_bin_id(), 16);
    }

    /**
     * Set the value of the field 'bin_id'
     */
    public void set_bin_id(int value) {
        setUIntBEElement(offsetBits_bin_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'bin_id'
     */
    public static int size_bin_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'bin_id'
     */
    public static int sizeBits_bin_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordX
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordX' is signed (false).
     */
    public static boolean isSigned_coordX() {
        return false;
    }

    /**
     * Return whether the field 'coordX' is an array (false).
     */
    public static boolean isArray_coordX() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordX'
     */
    public static int offset_coordX() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordX'
     */
    public static int offsetBits_coordX() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'coordX'
     */
    public int get_coordX() {
        return (int)getUIntBEElement(offsetBits_coordX(), 16);
    }

    /**
     * Set the value of the field 'coordX'
     */
    public void set_coordX(int value) {
        setUIntBEElement(offsetBits_coordX(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordX'
     */
    public static int size_coordX() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordX'
     */
    public static int sizeBits_coordX() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: coordY
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'coordY' is signed (false).
     */
    public static boolean isSigned_coordY() {
        return false;
    }

    /**
     * Return whether the field 'coordY' is an array (false).
     */
    public static boolean isArray_coordY() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'coordY'
     */
    public static int offset_coordY() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'coordY'
     */
    public static int offsetBits_coordY() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'coordY'
     */
    public int get_coordY() {
        return (int)getUIntBEElement(offsetBits_coordY(), 16);
    }

    /**
     * Set the value of the field 'coordY'
     */
    public void set_coordY(int value) {
        setUIntBEElement(offsetBits_coordY(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'coordY'
     */
    public static int size_coordY() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'coordY'
     */
    public static int sizeBits_coordY() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: trashInEccess
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'trashInEccess' is signed (false).
     */
    public static boolean isSigned_trashInEccess() {
        return false;
    }

    /**
     * Return whether the field 'trashInEccess' is an array (false).
     */
    public static boolean isArray_trashInEccess() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'trashInEccess'
     */
    public static int offset_trashInEccess() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'trashInEccess'
     */
    public static int offsetBits_trashInEccess() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'trashInEccess'
     */
    public int get_trashInEccess() {
        return (int)getUIntBEElement(offsetBits_trashInEccess(), 16);
    }

    /**
     * Set the value of the field 'trashInEccess'
     */
    public void set_trashInEccess(int value) {
        setUIntBEElement(offsetBits_trashInEccess(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'trashInEccess'
     */
    public static int size_trashInEccess() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'trashInEccess'
     */
    public static int sizeBits_trashInEccess() {
        return 16;
    }

}
